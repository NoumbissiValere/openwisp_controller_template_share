# Generated by Django 2.0.13 on 2019-04-08 19:14

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_netjsonconfig.base.template
import jsonfield.fields
import model_utils.fields
import openwisp_users.mixins
import taggit.managers
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('openwisp_users', '0004_default_groups'),
        ('config', '0034_auto_20190408_1904'),
    ]

    operations = [
        migrations.CreateModel(
            name='TemplateLibrary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(db_index=True, max_length=64, unique=True)),
                ('backend', models.CharField(choices=[('netjsonconfig.OpenWrt', 'OpenWRT/LEDE'), ('netjsonconfig.OpenWisp', 'OpenWISP Firmware 1.x')], help_text='Select <a href="http://netjsonconfig.openwisp.org/en/stable/" target="_blank">netjsonconfig</a> backend', max_length=128, verbose_name='backend')),
                ('config', jsonfield.fields.JSONField(blank=True, default=dict, help_text='configuration in NetJSON DeviceConfiguration format', verbose_name='configuration')),
                ('type', models.CharField(choices=[('generic', 'Generic'), ('vpn', 'VPN-client')], db_index=True, default='generic', help_text='template type, determines which features are available', max_length=16, verbose_name='type')),
                ('default', models.BooleanField(db_index=True, default=False, help_text='whether new configurations will have this template enabled by default', verbose_name='enabled by default')),
                ('auto_cert', models.BooleanField(db_index=True, default=django_netjsonconfig.base.template.default_auto_cert, help_text='whether x509 client certificates should be automatically managed behind the scenes for each configuration using this template, valid only for the VPN type', verbose_name='auto certificate')),
                ('flag', models.CharField(choices=[('private', 'Private'), ('public', 'Public'), ('shared_secret', 'Shared Secret')], db_index=True, default='priavte', help_text='Please select how you want your template to be shared', max_length=16, verbose_name='Flag')),
                ('description', models.TextField(help_text='This field shall be used for the public description of the template', verbose_name='Description')),
                ('note', models.TextField(help_text='Enter note which will be used internally by administrators', verbose_name='Note')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='openwisp_users.Organization', verbose_name='organization')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of template tags, may be used to ease auto configuration with specific settings (eg: 4G, mesh, WDS, VPN, ecc.)', through='config.TaggedTemplate', to='config.TemplateTag', verbose_name='Tags')),
                ('vpn', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='config.Vpn', verbose_name='VPN')),
            ],
            options={
                'verbose_name': 'template lib',
                'verbose_name_plural': 'template libs',
                'abstract': False,
            },
            bases=(openwisp_users.mixins.ValidateOrgMixin, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name='templatelibrary',
            unique_together={('organization', 'name')},
        ),
    ]
